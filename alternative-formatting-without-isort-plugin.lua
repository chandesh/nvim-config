-- ========================================\n-- Alternative Formatters Configuration (without isort.nvim plugin)\n-- ========================================\n-- This version removes the isort.nvim plugin and relies on:\n-- 1. conform.nvim for isort formatting\n-- 2. pylsp for isort integration\n-- 3. Manual keybinding for isort via conform\n\nreturn {\n  -- Modern formatting plugin\n  {\n    \"stevearc/conform.nvim\",\n    dependencies = { \"williamboman/mason.nvim\" },\n    event = { \"BufReadPre\", \"BufNewFile\" },\n    keys = {\n      {\n        \"<leader>cf\",\n        function()\n          require(\"conform\").format({ async = true, lsp_fallback = true })\n        end,\n        mode = { \"n\", \"v\" },\n        desc = \"Format buffer\",\n      },\n      -- Add isort-specific keybinding\n      {\n        \"<leader>ci\",\n        function()\n          require(\"conform\").format({ formatters = { \"isort\" }, async = true })\n        end,\n        mode = { \"n\", \"v\" },\n        desc = \"Organize imports (isort)\",\n        ft = \"python\",\n      },\n    },\n    config = function()\n      local conform = require(\"conform\")\n\n      conform.setup({\n        formatters_by_ft = {\n          -- Python\n          python = { \"black\", \"isort\" },\n          \n          -- JavaScript/TypeScript\n          javascript = { \"prettier\" },\n          typescript = { \"prettier\" },\n          javascriptreact = { \"prettier\" },\n          typescriptreact = { \"prettier\" },\n          \n          -- Web languages\n          html = { \"prettier\" },\n          css = { \"prettier\" },\n          scss = { \"prettier\" },\n          sass = { \"prettier\" },\n          less = { \"prettier\" },\n          \n          -- JSON/YAML\n          json = { \"prettier\" },\n          jsonc = { \"prettier\" },\n          yaml = { \"prettier\" },\n          \n          -- Markdown\n          markdown = { \"prettier\" },\n          \n          -- Lua\n          lua = { \"stylua\" },\n          \n          -- Shell\n          sh = { \"shfmt\" },\n          bash = { \"shfmt\" },\n          \n          -- Django templates\n          htmldjango = { \"djlint\" },\n        },\n\n        -- Format on save\n        format_on_save = function(bufnr)\n          -- Disable autoformat for certain filetypes\n          local ignore_filetypes = { \"sql\", \"java\" }\n          if vim.tbl_contains(ignore_filetypes, vim.bo[bufnr].filetype) then\n            return\n          end\n          \n          -- Disable autoformat if a .disable-autoformat file exists in the project root\n          local disable_dirs = vim.fs.find({ \".disable-autoformat\", \".disable-conform\" }, { upward = true, path = vim.fn.getcwd() })\n          if #disable_dirs > 0 then\n            return\n          end\n\n          return { timeout_ms = 500, lsp_fallback = true }\n        end,\n\n        -- Custom formatters\n        formatters = {\n          black = {\n            prepend_args = { \"--line-length\", \"88\", \"--skip-string-normalization\" },\n          },\n          isort = {\n            -- Configure isort directly through conform.nvim\n            prepend_args = { \n              \"--line-length\", \"88\", \n              \"--multi-line\", \"3\", \n              \"--trailing-comma\",\n              \"--force-grid-wrap\", \"0\",\n              \"--combine-as\", \n              \"--use-parentheses\",\n            },\n          },\n          prettier = {\n            prepend_args = function()\n              -- Check for project-specific prettier config\n              local config_files = vim.fs.find({\n                \".prettierrc\",\n                \".prettierrc.json\",\n                \".prettierrc.js\",\n                \"prettier.config.js\",\n                \".prettierrc.yml\",\n                \".prettierrc.yaml\",\n              }, { upward = true, path = vim.fn.getcwd() })\n              \n              if #config_files > 0 then\n                return {}\n              else\n                -- Default prettier settings for consistency\n                return {\n                  \"--print-width\", \"80\",\n                  \"--tab-width\", \"2\",\n                  \"--use-tabs\", \"false\",\n                  \"--semi\", \"true\",\n                  \"--single-quote\", \"true\",\n                  \"--quote-props\", \"as-needed\",\n                  \"--trailing-comma\", \"es5\",\n                  \"--bracket-spacing\", \"true\",\n                  \"--bracket-same-line\", \"false\",\n                  \"--arrow-parens\", \"avoid\",\n                }\n              end\n            end,\n          },\n          stylua = {\n            prepend_args = { \"--column-width\", \"120\", \"--line-endings\", \"Unix\", \"--indent-type\", \"Spaces\", \"--indent-width\", \"2\" },\n          },\n          shfmt = {\n            prepend_args = { \"-i\", \"2\", \"-ci\", \"-bn\" },\n          },\n          djlint = {\n            args = { \"--reformat\", \"--indent\", \"2\", \"-\" },\n            stdin = true,\n          },\n        },\n      })\n\n      -- Install formatters via Mason\n      local mason_registry = require(\"mason-registry\")\n      local formatters_to_install = {\n        \"black\", \"isort\", \"prettier\", \"stylua\", \"shfmt\", \"djlint\"\n      }\n\n      for _, formatter in ipairs(formatters_to_install) do\n        if not mason_registry.is_installed(formatter) then\n          vim.cmd(\"MasonInstall \" .. formatter)\n        end\n      end\n    end,\n  },\n\n  -- ... (rest of the configuration remains the same, but without the isort.nvim plugin)\n  \n  -- Python environment and imports management\n  {\n    \"linux-cultist/venv-selector.nvim\",\n    dependencies = { \"neovim/nvim-lspconfig\", \"nvim-telescope/telescope.nvim\", \"mfussenegger/nvim-dap-python\" },\n    cmd = \"VenvSelect\",\n    keys = {\n      { \"<leader>cv\", \"<cmd>VenvSelect<cr>\", desc = \"Select VirtualEnv\" },\n    },\n    config = function()\n      require(\"venv-selector\").setup({\n        auto_refresh = true,\n        dap_enabled = true,\n        parents = 2,\n        name = {\n          \"venv\",\n          \".venv\",\n          \"env\",\n          \".env\",\n        },\n      })\n    end,\n  },\n\n  -- NOTE: isort.nvim plugin removed - using conform.nvim instead\n  -- You can still organize imports with <leader>ci keybinding\n  -- isort is also integrated with pylsp and runs automatically\n}\n
